@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Scores.Queries
@using QuantumSummerLab.Application.Teams.Commands
@using QuantumSummerLab.Copilot.Extensions

@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IMediator Mediator

@page "/leaderboard"

<PageTitle>Quantum Summer Lab - Leaderboard</PageTitle>

@if (Entries is not null)
{
    <MudCard Elevation="5" Class="mt-6">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Leaderboard</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudTable Items="@Entries" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh Style="width: 100px;">Position</MudTh>
                <MudTh>Team</MudTh>
                <MudTh Style="width: 150px;">Score</MudTh>
                <MudTh>Comments</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Position">
                    <MudChip T="string" Color="Color.Primary">@context.Position</MudChip>
                </MudTd>
                <MudTd DataLabel="Team"><MudLink Href="@($"/team/{context.TeamId}")"><strong>@context.TeamName</strong></MudLink></MudTd>
                <MudTd DataLabel="Score">
                    <MudChip T="string" Color="@(context.TotalPoints > 0 ? Color.Success : Color.Warning)">@(context.TotalPoints > 0 ? $"{context.TotalPoints}" : "no") points</MudChip>
                </MudTd>
                <MudTd DataLabel="Comments">
                    @if (context.TotalPoints == 0)
                    {
                        <MudText><strong>No scores</strong> recorded yet!</MudText>
                    }
                    else
                    {
                        <MudText><strong>@($"{(context.ChallengesCompleted == 0 ? "No" : $"{context.ChallengesCompleted}")}") @($"{(context.ChallengesCompleted == 1 ? "challenge" : "challenges")}")</strong> completed in <strong>@context.ChallengesTried @($"{(context.ChallengesTried == 1 ? "try" : "tries")}")</strong> and <strong>@context.ProcessingTime.AsDuration() spent</strong> keeping our Copilot busy!</MudText>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCard>
}
else
{
    <MudText Typo="Typo.h6" Class="mt-6">Loading leaderboard...</MudText>
}

@code
{
    private List<LeaderboardEntry> Entries { get; set; }
    private string SearchString = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await Mediator.Send(new GetLeaderboardQuery());
            Entries = result.Entries;

            StateHasChanged();
        }
    }

    private bool FilterFunc(LeaderboardEntry element) => Filter(element, SearchString);

    private bool Filter(LeaderboardEntry entry, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (entry.TeamName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}