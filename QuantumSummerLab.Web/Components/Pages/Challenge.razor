@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Challenges.Queries
@using QuantumSummerLab.Application.Scores.Commands
@using QuantumSummerLab.Application.Scores.Queries
@using QuantumSummerLab.Application.Teams.Commands
@using QuantumSummerLab.Copilot
@using QuantumSummerLab.Copilot.Extensions
@using QuantumSummerLab.Web.Helpers

@inject NavigationManager NavigationManager
@inject NavigationHelper NavigationHelper
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IMediator Mediator
@inject DrawerHelper DrawerHelper
@inject ICopilotHelper CopilotHelper

@page "/challenge/{ChallengeName}"

<PageTitle>Quantum Summer Lab - Challenge</PageTitle>

<MudText Typo="Typo.h4" Class="my-4">@(ChallengeName == "0" ? "Example Challenge" : $"Challenge {ChallengeName}")</MudText>

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4"></MudProgressCircular>
}
else if (IsAvailable)
{
    <MudText Typo="Typo.h5" Class="my-4">@Title</MudText>

    @if (IsLoggedIn)
    {
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudFab Style="position:fixed; bottom:10px;right:10px;z-index:666;" Color="@Color.Tertiary" StartIcon="@Icons.Material.Filled.Webhook" DropShadow="true" OnClick="@Copilot" />
        </MudHidden>

        @if (IsSuccess)
        {
            <MudAlert Severity="Severity.Success">You have successfully solved this challenge in @NumberOfAttempts attempts!</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Info">@(NumberOfAttempts == 0 ? "You have not started this challenge!" : $"You have attempted {NumberOfAttempts} times to solve this challenge!")</MudAlert>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="my-4">You need to <MudLink Href="/login">login</MudLink> to be able to submit solutions!</MudAlert>
    }

    @foreach (var line in Description)
    {
        <MudText Typo="Typo.body1" Class="my-4">@line</MudText>
    }

    <MudMarkdown Value="@SolutionTemplate" />

    @if (ExampleDescription.Any())
    {
        @foreach (var line in ExampleDescription)
        {
            <MudText Typo="Typo.body1" Class="my-4">@line</MudText>
        }
        <MudMarkdown Value="@ExampleCode" />
    }

    @if (IsLoggedIn)
    {
        @if (!IsSuccess)
        {
            <MudCard Elevation="5" Class="my-8">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Submit your solution here</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudAlert Severity="@(IsValid.HasValue? IsValid.Value? Severity.Success: Severity.Error : Severity.Normal)" Class="mt-n4 mb-4">@FeedbackMessage</MudAlert>

                    @if (VerificationFeedback != null)
                    {
                        <MudContainer Class="mb-8">
                            @foreach (var feedback in VerificationFeedback)
                            {
                                <div class="d-flex ml-4">
                                    <MudIcon Icon="@(feedback.Valid? Icons.Material.Filled.Check : Icons.Material.Filled.Close)" Color="@(feedback.Valid? Color.Success: Color.Error)" class="mr-3"></MudIcon>
                                    <MudText Color="@(feedback.Valid? Color.Success: Color.Error)">@feedback.Message</MudText>
                                </div>
                            }
                        </MudContainer>
                    }
                    <MudTextField @bind-Value="Solution" Label="Your solution" spellcheck="false" AutoGrow Lines="5" Variant="Variant.Outlined" Class="monospace"></MudTextField>
                </MudCardContent>
                <MudCardActions>
                    @if (IsSubmitting)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true" Class="ml-2 mb-2 mr-2"><MudProgressCircular Class="ml-n2 mr-2" Indeterminate="true" Size="Size.Small" Color="Color.Default" />Submit your solution</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="@Submit" Class="ml-2 mb-2 mr-2">Submit your solution</MudButton>
                    }
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@Clear" Class="ml-2 mb-2">Clear</MudButton>
                </MudCardActions>
            </MudCard>
        }

        @if (YourSubmissions != null && YourSubmissions.Any())
        {
            <MudCard Elevation="5" Class="my-8">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Your submission history</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (IsSuccess)
                    {
                        <MudAlert Severity="Severity.Success" Class="mt-n6 mb-2">You have successfully solved this challenge in @NumberOfAttempts attempts!</MudAlert>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-n6 mb-2">@(NumberOfAttempts == 0 ? "You have not started this challenge!" : $"You have attempted {NumberOfAttempts} times to solve this challenge!")</MudAlert>
                    }
                    <MudExpansionPanels Outlined="false" Elevation="0">
                        @foreach (var submission in YourSubmissions)
                        {
                            <MudExpansionPanel Expanded="@submission.IsSuccessful">
                                <TitleContent>
                                    <div class="d-flex">
                                        @if (submission.IsSuccessful)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCheck" Color="Color.Success" class="mr-3"></MudIcon>
                                            <MudText Color="Color.Default">You have submitted a <strong>correct solution</strong> @submission.SubmissionTimestamp.AsTimeAgo()</MudText>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.PlaylistRemove" Color="Color.Error" class="mr-3"></MudIcon>
                                            <MudText Color="Color.Default">You have submitted a <strong>wrong solution</strong> @submission.SubmissionTimestamp.AsTimeAgo()</MudText>
                                        }
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <MudContainer Class="mb-4">
                                        @foreach (var feedback in submission.Feedback)
                                        {
                                            <div class="d-flex ml-4">
                                                <MudIcon Icon="@(feedback.Valid? Icons.Material.Filled.Check : Icons.Material.Filled.Close)" Color="@(feedback.Valid? Color.Success: Color.Error)" class="mr-3"></MudIcon>
                                                <MudText Color="@(feedback.Valid? Color.Success: Color.Error)">@feedback.Message</MudText>
                                            </div>
                                        }
                                    </MudContainer>
                                    <MudMarkdown Value="@submission.ProposedSolution" />
                                </ChildContent>
                            </MudExpansionPanel>
                            <MudDivider />
                        }
                    </MudExpansionPanels>
                </MudCardContent>
            </MudCard>
        }
    }
}
else
{
    <MudAlert Severity="Severity.Warning">The challenge with name 'Challenge @ChallengeName' could not be loaded.</MudAlert>
}

@code
{
    private bool? _lastLoggedIn;

    [Parameter]
    public string ChallengeName { get; set; }

    private bool IsLoggedIn { get; set; }
    private string TeamName { get; set; }
    private bool IsLoading { get; set; }
    private bool IsAvailable { get; set; }
    private bool IsSubmitting { get; set; }
    private List<YourSubmission> YourSubmissions { get; set; }
    private List<VerificationFeedback> VerificationFeedback { get; set; } = new List<VerificationFeedback>();

    private string Title { get; set; }
    private string[] Description { get; set; }
    private string SolutionTemplate { get; set; }
    private string[] ExampleDescription { get; set; }
    private string ExampleCode { get; set; }
    private string CopilotInstructions { get; set; }
    private string FeedbackMessage { get; set; }
    private bool? IsValid { get; set; }

    private string Solution { get; set; }

    private bool IsSuccess { get; set; }
    private int NumberOfAttempts { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        var challenge = await Mediator.Send(new GetChallengeByNameQuery { ChallengeName = ChallengeName });
        IsAvailable = challenge.IsAvailable;
        if (IsAvailable)
        {
            Title = challenge.Title;
            Description = challenge.Description.Split("[BR]");
            SolutionTemplate = $"```js{Environment.NewLine}{challenge.SolutionTemplate}{Environment.NewLine}```";
            ExampleDescription = challenge.ExampleDescription.Split("[BR]", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).ToArray();
            ExampleCode = $"```js{Environment.NewLine}{challenge.ExampleCode}{Environment.NewLine}```";
            FeedbackMessage = "You have not yet submitted a solution";
            VerificationFeedback = new List<VerificationFeedback>();
            CopilotInstructions = challenge.CopilotInstructions;
            Clear();
            await LoadScore();
        }

        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authToken = await ProtectedLocalStore.GetAsync<AuthenticationToken>("authToken");

        if (_lastLoggedIn == null || _lastLoggedIn != authToken.Success)
        {
            IsLoggedIn = authToken.Success;
            TeamName = authToken.Success ? authToken.Value.TeamName : string.Empty;
            _lastLoggedIn = authToken.Success;

            await LoadScore();
            StateHasChanged();
        }
    }

    protected async Task Submit()
    {
        IsSubmitting = true;
        StateHasChanged();

        var response = await Mediator.Send(new VerifyChallengeSolutionCommand
        {
            ChallengeName = ChallengeName,
            TeamName = TeamName,
            Solution = Solution,
            Timestamp = DateTime.UtcNow
        });

        IsValid = response.IsValid;
        FeedbackMessage = response.FeedbackMessage;
        VerificationFeedback = response.Feedback;

        await LoadScore();

        IsSubmitting = false;

        NavigationHelper.Update();
        StateHasChanged();
    }

    protected void Clear()
    {
        Solution = string.Empty;
        IsValid = null;
        FeedbackMessage = "You have not yet submitted a solution";
        VerificationFeedback = new List<VerificationFeedback>();
        StateHasChanged();
    }

    protected void Copilot()
    {
        DrawerHelper.Popout(ChallengeName, CopilotInstructions);
    }

    private async Task LoadScore()
    {
        if (!string.IsNullOrEmpty(TeamName))
        {
            var score = await Mediator.Send(new GetYourScoreQuery { ChallengeName = ChallengeName, TeamName = TeamName });
            IsSuccess = score.IsSuccess;
            NumberOfAttempts = score.TotalAttempts;

            var submissions = await Mediator.Send(new GetYourSubmissionsQuery { ChallengeName = ChallengeName = ChallengeName, TeamName = TeamName });
            YourSubmissions = submissions.YourSubmissions;
        }
    }
}