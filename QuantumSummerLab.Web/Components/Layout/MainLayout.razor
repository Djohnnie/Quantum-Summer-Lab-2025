@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Teams.Commands
@using QuantumSummerLab.Web.Helpers

@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject DrawerHelper DrawerHelper

<MudThemeProvider @ref="_mudThemeProvider" Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudIcon Icon="@Icons.Material.Filled.Webhook" Class="ml-3" />
        <MudLink Href="/" Typo="Typo.h6" Class="ml-3" Color="Color.Default" Style="text-decoration: none;">Quantum Summer Lab</MudLink>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudTooltip Text="@(string.IsNullOrEmpty(TeamName) ? "Login" : "Logout")">
            <MudFab StartIcon="@Icons.Material.Filled.AccountBox" Color="Color.Inherit" Size="Size.Medium" DropShadow="false" Label="@(string.IsNullOrEmpty(TeamName) ? "" : TeamName)" OnClick="@Login" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="5">
        <NavMenu />
        <MudSpacer />
        <MudText Typo="Typo.body2" Class="ml-2 mb-2 mt-4">v0.1 - powered by .NET 9</MudText>
    </MudDrawer>
    @if (_copilotEnabled)
    {
        <MudHidden Breakpoint="Breakpoint.SmAndDown" HiddenChanged="@CopilotHiddenChanged">
            <MudDrawer @bind-Open="_copilotOpen" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Persistent" Width="40%" Elevation="5">
                <MudContainer Class="mb-12">
                    @if (_copilotOpen)
                    {
                        <MudFab Style="position:fixed; bottom:10px; right:10px; z-index:666;" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Close" DropShadow="true" OnClick="@CloseCopilot" />
                    }
                    <CopilotPane @ref="_copilotPane" TeamName="@TeamName" />
                </MudContainer>
            </MudDrawer>
        </MudHidden>
    }
    <MudMainContent Class="pa-4 pa-sm-8 pa-md-12 mt-12">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code
{
    private MudThemeProvider _mudThemeProvider;
    private bool _drawerOpen = true;
    private bool _copilotEnabled = false;
    private bool _copilotOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private bool? _lastLoggedIn;

    private CopilotPane _copilotPane;

    private string TeamName { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DrawerHelper.ShouldPopout += OnShouldPopout;
        NavigationManager.LocationChanged += OnLocationChanged;

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
        }

        var authToken = await ProtectedLocalStore.GetAsync<AuthenticationToken>("authToken");

        if (_lastLoggedIn == null || _lastLoggedIn != authToken.Success)
        {
            TeamName = authToken.Success ? authToken.Value.TeamName : string.Empty;
            _lastLoggedIn = authToken.Success;
            StateHasChanged();
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void OnShouldPopout(object? sender, ParametrizedEventArgs e)
    {
        _copilotOpen = true;
        _ = _copilotPane.Refresh(e.Parameter1, e.Parameter2);
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _copilotEnabled = !e.Location.Contains("reference");
        _copilotOpen = false;

        StateHasChanged();
    }

    private void CopilotHiddenChanged(bool hidden)
    {
        if (hidden)
        {
            _copilotOpen = false;
            StateHasChanged();
        }
    }

    protected void CloseCopilot()
    {
        _copilotOpen = false;
        StateHasChanged();
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}