@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Challenges.Queries
@using QuantumSummerLab.Application.Scores.Commands
@using QuantumSummerLab.Application.Scores.Queries
@using QuantumSummerLab.Application.Teams.Commands
@using QuantumSummerLab.Web.Copilot

@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IMediator Mediator
@inject ICopilotHelper CopilotHelper

@page "/copilot"

<PageTitle>Quantum Summer Lab Copilot</PageTitle>

<MudText Typo="Typo.h4" Class="my-4">Quantum Summer Lab Copilot</MudText>

@if (IsLoggedIn)
{
    <MudContainer Class="pa-12">
        @foreach (var message in _chatHistory.Messages)
        {
            if (message.Role != ChatRole.System)
            {
                <MudChat ChatPosition="@(message.Role == ChatRole.Assistant ? ChatBubblePosition.Start : ChatBubblePosition.End)">
                    <MudAvatar Color="@(message.Role == ChatRole.Assistant ? Color.Default : Color.Info)">
                        <MudIcon Icon="@(message.Role == ChatRole.Assistant ? Icons.Material.Filled.Webhook : Icons.Material.Filled.Face)" Color="Color.Default" />
                    </MudAvatar>

                    @foreach (var sentence in message.Content.Split("[BR]", StringSplitOptions.RemoveEmptyEntries))
                    {
                        <MudChatBubble Color="@(message.Role == ChatRole.Assistant ? Color.Default : Color.Info)">
                            @sentence.Trim()
                        </MudChatBubble>
                    }
                </MudChat>
            }
        }
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column justify-center gap-4">
        <MudTextField T="string" Label="Outlined" Variant="Variant.Outlined" @bind-Value="Chat" Immediate="true" OnKeyDown="@OnKeyDown" TextUpdateSuppression="false"
                      Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="@AskQuestion" />
    </MudContainer>
}
else
{
    <MudAlert Severity="Severity.Info" Class="my-4">You have to <MudLink Href="/login">login</MudLink> to be able to use the Quantum Summer Lab Copilot!</MudAlert>
}

@code
{
    private bool? _lastLoggedIn;
    private bool IsLoggedIn { get; set; }
    private string TeamName { get; set; }

    private ChatHistory _chatHistory = new ChatHistory();
    private string Chat { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authToken = await ProtectedSessionStore.GetAsync<AuthenticationToken>("authToken");

        if (_lastLoggedIn == null || _lastLoggedIn != authToken.Success)
        {
            IsLoggedIn = authToken.Success;
            TeamName = authToken.Success ? authToken.Value.TeamName : string.Empty;
            _lastLoggedIn = authToken.Success;

            StateHasChanged();
        }
    }

    protected async Task AskQuestion()
    {
        if (string.IsNullOrWhiteSpace(Chat))
        {
            return;
        }

        _chatHistory.TeamName = TeamName;
        _chatHistory.AddUserMessage(Chat);
        Chat = string.Empty;
        StateHasChanged();
        _chatHistory = await CopilotHelper.Chat(_chatHistory);
        StateHasChanged();
    }

    protected async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AskQuestion();
        }
    }
}