@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Teams.Commands

@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IMediator Mediator

@page "/login"

<PageTitle>Login</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Login</MudText>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">The Story Book</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This day everything happened.</MudText>
        <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
        <MudTextField @bind-Value="TeamName" Label="Team" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="Password" Label="Password" InputType="InputType.Password" Variant="Variant.Text"></MudTextField>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@Authenticate">Login</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@Register">Register</MudButton>
    </MudCardActions>
</MudCard>

@code {

    private int currentCount = 0;

    private bool IsLoggedIn { get; set; }
    private string TeamName { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IsLoggedIn = (await ProtectedSessionStore.GetAsync<AuthenticationToken>("authToken")).Success;
    }

    protected async Task Authenticate()
    {
        var response = await Mediator.Send(new LoginCommand
        {
            TeamName = TeamName,
            Password = Password
        });

        if (response.Success)
        {
            await ProtectedSessionStore.SetAsync("authToken", response.Token);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Handle login failure (e.g., show an error message)
        }
    }

    protected async Task Register()
    {
        var response = await Mediator.Send(new RegisterCommand
        {
            TeamName = TeamName,
            Password = Password
        });
    }
}