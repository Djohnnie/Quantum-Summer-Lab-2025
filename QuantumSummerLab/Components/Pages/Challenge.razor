@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Challenges.Queries
@using QuantumSummerLab.Application.Scores.Commands
@using QuantumSummerLab.Application.Scores.Queries
@using QuantumSummerLab.Application.Teams.Commands

@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IMediator Mediator

@page "/challenge/{ChallengeName}"

<PageTitle>Challenge @ChallengeName</PageTitle>

<MudText Typo="Typo.h4" Class="my-4">Challenge @ChallengeName</MudText>

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4"></MudProgressCircular>
}
else if (IsAvailable)
{
    <MudText Typo="Typo.h5" Class="my-4">@Title</MudText>

    @if (IsLoggedIn)
    {
        @if (IsSuccess)
        {
            <MudAlert Severity="Severity.Success">You have successfully solved this challenge in @NumberOfAttempts attempts!</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Info">@(NumberOfAttempts == 0 ? "You have not started this challenge!" : $"You have attempted {NumberOfAttempts} times to solve this challenge!")</MudAlert>
        }
    }

    @foreach (var line in Description)
    {
        <MudText Typo="Typo.body1" Class="my-4">@line</MudText>
    }
    <MudMarkdown Value="@SolutionTemplate" />

    @if (!string.IsNullOrEmpty(ExampleCode))
    {
        @foreach (var line in ExampleDescription)
        {
            <MudText Typo="Typo.body1" Class="my-4">@line</MudText>
        }
        <MudMarkdown Value="@ExampleCode" />
    }

    @if (IsLoggedIn)
    {
        <MudCard Elevation="5" Class="my-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Submit your solution here</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField @bind-Value="Solution" Label="Your solution" AutoGrow Lines="5" Variant="Variant.Outlined" Class="monospace"></MudTextField>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@Submit">Submit</MudButton>
            </MudCardActions>
        </MudCard>

        <MudText Typo="Typo.h5" Class="my-4">@IsSuccess</MudText>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="my-4">You should <MudLink Href="/login">login</MudLink> to be able to submit solutions!</MudAlert>
    }
}
else
{
    <MudAlert Severity="Severity.Warning">The challenge with name 'Challenge @ChallengeName' could not be loaded.</MudAlert>
}

@code {

    private int currentCount = 0;

    [Parameter]
    public string ChallengeName { get; set; }

    private bool IsLoggedIn { get; set; }
    private bool IsLoading { get; set; }
    private bool IsAvailable { get; set; }

    private string Title { get; set; }
    private string[] Description { get; set; }
    private string SolutionTemplate { get; set; }
    private string[] ExampleDescription { get; set; }
    private string ExampleCode { get; set; }

    private string Solution { get; set; }

    private bool IsSuccess { get; set; }
    private int NumberOfAttempts { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        var challenge = await Mediator.Send(new GetChallengeByNameQuery { ChallengeName = ChallengeName });
        IsAvailable = challenge.IsAvailable;
        if (IsAvailable)
        {
            Title = challenge.Title;
            Description = challenge.Description.Split("[BR]");
            SolutionTemplate = $"```js{Environment.NewLine}{challenge.SolutionTemplate}{Environment.NewLine}```";
            ExampleDescription = challenge.ExampleDescription.Split("[BR]");
            ExampleCode = $"```js{Environment.NewLine}{challenge.ExampleCode}{Environment.NewLine}```";
        }

        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {        
        IsLoggedIn = (await ProtectedSessionStore.GetAsync<AuthenticationToken>("authToken")).Success;

        await LoadScore();
        StateHasChanged();
    }

    protected async Task Submit()
    {
        var response = await Mediator.Send(new VerifyChallengeSolutionCommand
        {
            ChallengeName = ChallengeName,
            TeamName = "djohnnie",
            Solution = Solution,
            Timestamp = DateTime.UtcNow
        });

        //IsSuccess = response.Message;
        await LoadScore();
        StateHasChanged();
    }

    private async Task LoadScore()
    {
        var authToken = await ProtectedSessionStore.GetAsync<AuthenticationToken>("authToken");

        if (authToken.Success)
        {
            var score = await Mediator.Send(new GetYourScoreQuery { ChallengeName = ChallengeName, TeamName = authToken.Value.TeamName });
            IsSuccess = score.IsSuccess;
            NumberOfAttempts = score.TotalAttempts;
        }
    }
}