@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuantumSummerLab.Application.Challenges.Queries
@using QuantumSummerLab.Application.Scores.Commands
@using QuantumSummerLab.Application.Teams.Commands

@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IMediator Mediator

@page "/challenge/{ChallengeName}"

<PageTitle>Challenge @ChallengeName</PageTitle>

<MudText Typo="Typo.h4" Class="my-4">Challenge @ChallengeName</MudText>

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4"></MudProgressCircular>
}
else if (IsAvailable)
{

    <MudText Typo="Typo.h5" Class="my-4">@Title</MudText>

    <MudText Typo="Typo.body1" Class="my-4">@Description</MudText>

    <MudText Typo="Typo.body1" Class="my-4">The operation containing your solution should match the following signature. Please copy paste this code-snippet into your Visual Studio Code editor to work on it.</MudText>

    <MudMarkdown Value="@SolutionTemplate" />

    <MudCard Elevation="5" Class="my-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Submit your solution here</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="Solution" Label="Your solution" AutoGrow Lines="5" Variant="Variant.Outlined" Class="monospace"></MudTextField>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@Submit">Submit</MudButton>
        </MudCardActions>
    </MudCard>

    <MudText Typo="Typo.h5" Class="my-4">@IsSuccess</MudText>
}
else
{
    <MudAlert Severity="Severity.Warning">The challenge with name 'Challenge @ChallengeName' could not be loaded.</MudAlert>
}

@code {

    private int currentCount = 0;

    [Parameter]
    public string ChallengeName { get; set; }

    private bool IsLoading { get; set; }
    private bool IsAvailable { get; set; }

    private string Title { get; set; }
    private string Description { get; set; }
    private string SolutionTemplate { get; set; }

    private string Solution { get; set; }

    private string IsSuccess { get; set; } = "Not submitted yet";

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        var challenge = await Mediator.Send(new GetChallengeByNameQuery { ChallengeName = ChallengeName });
        IsAvailable = challenge.IsAvailable;
        Title = challenge.Title;
        Description = challenge.Description;
        SolutionTemplate = $"```js{Environment.NewLine}{challenge.SolutionTemplate}{Environment.NewLine}```";
        IsLoading = false;
    }

    protected async Task Submit()
    {
        var response = await Mediator.Send(new VerifyChallengeSolutionCommand
        {
            ChallengeName = ChallengeName,
            TeamName = "djohnnie",
            Solution = Solution,
            Timestamp = DateTime.UtcNow
        });

        IsSuccess = response.Message;
        StateHasChanged();
    }
}